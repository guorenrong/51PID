# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\SettingDialog.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from ast import Not
from struct import pack,unpack
from time import sleep
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QIcon, QPixmap
import serial

class Ui_SettingDialog(object):
    def setupUi(self, SettingDialog):
        SettingDialog.setObjectName("SettingDialog")
        SettingDialog.resize(738, 409)
        self.horizontalLayoutWidget = QtWidgets.QWidget(SettingDialog)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(60, 30, 611, 81))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.feedbackcb = QtWidgets.QComboBox(self.horizontalLayoutWidget)
        self.feedbackcb.setObjectName("feedbackcb")
        self.feedbackcb.addItem("")
        self.feedbackcb.addItem("")
        self.feedbackcb.addItem("")
        self.feedbackcb.addItem("")
        self.feedbackcb.addItem("")
        self.feedbackcb.addItem("")
        self.feedbackcb.addItem("")
        self.feedbackcb.addItem("")
        self.feedbackcb.addItem("")
        self.feedbackcb.addItem("")
        self.feedbackcb.addItem("")
        self.feedbackcb.addItem("")
        self.feedbackcb.addItem("")
        self.feedbackcb.addItem("")
        self.feedbackcb.addItem("")
        self.horizontalLayout.addWidget(self.feedbackcb)
        self.feedbackle = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.feedbackle.setObjectName("feedbackle")
        self.horizontalLayout.addWidget(self.feedbackle)
        self.feedbackbtn = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.feedbackbtn.setObjectName("feedbackbtn")
        self.horizontalLayout.addWidget(self.feedbackbtn)
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(SettingDialog)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(60, 150, 611, 81))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.calibratecb = QtWidgets.QComboBox(self.horizontalLayoutWidget_2)
        self.calibratecb.setObjectName("calibratecb")
        self.calibratecb.addItem("")
        self.calibratecb.addItem("")
        self.calibratecb.addItem("")
        self.calibratecb.addItem("")
        self.calibratecb.addItem("")
        self.calibratecb.addItem("")
        self.calibratecb.addItem("")
        self.calibratecb.addItem("")
        self.calibratecb.addItem("")
        self.calibratecb.addItem("")
        self.calibratecb.addItem("")
        self.calibratecb.addItem("")
        self.horizontalLayout_2.addWidget(self.calibratecb)
        self.calibratele = QtWidgets.QLineEdit(self.horizontalLayoutWidget_2)
        self.calibratele.setObjectName("calibratele")
        self.horizontalLayout_2.addWidget(self.calibratele)
        self.calibratebtn = QtWidgets.QPushButton(self.horizontalLayoutWidget_2)
        self.calibratebtn.setObjectName("calibratebtn")
        self.horizontalLayout_2.addWidget(self.calibratebtn)
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(SettingDialog)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(60, 270, 611, 81))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label_3 = QtWidgets.QLabel(self.horizontalLayoutWidget_3)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_3.addWidget(self.label_3)
        self.settingcb = QtWidgets.QComboBox(self.horizontalLayoutWidget_3)
        self.settingcb.setObjectName("settingcb")
        self.settingcb.addItem("")
        self.settingcb.addItem("")
        self.settingcb.addItem("")
        self.settingcb.addItem("")
        self.settingcb.addItem("")
        self.settingcb.addItem("")
        self.settingcb.addItem("")
        self.settingcb.addItem("")
        self.settingcb.addItem("")
        self.settingcb.addItem("")
        self.settingcb.addItem("")
        self.settingcb.addItem("")
        self.horizontalLayout_3.addWidget(self.settingcb)
        self.settingle = QtWidgets.QLineEdit(self.horizontalLayoutWidget_3)
        self.settingle.setObjectName("settingle")
        self.horizontalLayout_3.addWidget(self.settingle)
        self.settingbtn = QtWidgets.QPushButton(self.horizontalLayoutWidget_3)
        self.settingbtn.setObjectName("settingbtn")
        self.horizontalLayout_3.addWidget(self.settingbtn)

        self.retranslateUi(SettingDialog)
        QtCore.QMetaObject.connectSlotsByName(SettingDialog)

        self.port = "COM2"
        self.feedbackbtn.clicked.connect(self.feedback)
        self.calibratebtn.clicked.connect(self.calibrate)
        self.settingbtn.clicked.connect(self.setting)


    def retranslateUi(self, SettingDialog):
        _translate = QtCore.QCoreApplication.translate
        SettingDialog.setWindowTitle(_translate("SettingDialog", "设定"))
        self.label.setText(_translate("SettingDialog", "回传命令"))
        self.feedbackcb.setItemText(0, _translate("SettingDialog", "B0"))
        self.feedbackcb.setItemText(1, _translate("SettingDialog", "B1"))
        self.feedbackcb.setItemText(2, _translate("SettingDialog", "B2"))
        self.feedbackcb.setItemText(3, _translate("SettingDialog", "B3"))
        self.feedbackcb.setItemText(4, _translate("SettingDialog", "B4"))
        self.feedbackcb.setItemText(5, _translate("SettingDialog", "B5"))
        self.feedbackcb.setItemText(6, _translate("SettingDialog", "B6"))
        self.feedbackcb.setItemText(7, _translate("SettingDialog", "B7"))
        self.feedbackcb.setItemText(8, _translate("SettingDialog", "B8"))
        self.feedbackcb.setItemText(9, _translate("SettingDialog", "B9"))
        self.feedbackcb.setItemText(10, _translate("SettingDialog", "BB"))
        self.feedbackcb.setItemText(11, _translate("SettingDialog", "BC"))
        self.feedbackcb.setItemText(12, _translate("SettingDialog", "BD"))
        self.feedbackcb.setItemText(13, _translate("SettingDialog", "BE"))
        self.feedbackcb.setItemText(14, _translate("SettingDialog", "BF"))
        self.feedbackbtn.setText(_translate("SettingDialog", "回传发送"))
        self.label_2.setText(_translate("SettingDialog", "校准命令"))
        self.calibratecb.setItemText(0, _translate("SettingDialog", "C0"))
        self.calibratecb.setItemText(1, _translate("SettingDialog", "C1"))
        self.calibratecb.setItemText(2, _translate("SettingDialog", "C2"))
        self.calibratecb.setItemText(3, _translate("SettingDialog", "C3"))
        self.calibratecb.setItemText(4, _translate("SettingDialog", "C4"))
        self.calibratecb.setItemText(5, _translate("SettingDialog", "C5"))
        self.calibratecb.setItemText(6, _translate("SettingDialog", "C6"))
        self.calibratecb.setItemText(7, _translate("SettingDialog", "C7"))
        self.calibratecb.setItemText(8, _translate("SettingDialog", "C8"))
        self.calibratecb.setItemText(9, _translate("SettingDialog", "C9"))
        self.calibratecb.setItemText(10, _translate("SettingDialog", "CA"))
        self.calibratecb.setItemText(11, _translate("SettingDialog", "CB"))
        self.calibratebtn.setText(_translate("SettingDialog", "校准发送"))
        self.label_3.setText(_translate("SettingDialog", "设定命令"))
        self.settingcb.setItemText(0, _translate("SettingDialog", "D0"))
        self.settingcb.setItemText(1, _translate("SettingDialog", "D1"))
        self.settingcb.setItemText(2, _translate("SettingDialog", "D2"))
        self.settingcb.setItemText(3, _translate("SettingDialog", "D3"))
        self.settingcb.setItemText(4, _translate("SettingDialog", "D4"))
        self.settingcb.setItemText(5, _translate("SettingDialog", "D5"))
        self.settingcb.setItemText(6, _translate("SettingDialog", "D6"))
        self.settingcb.setItemText(7, _translate("SettingDialog", "D7"))
        self.settingcb.setItemText(8, _translate("SettingDialog", "D8"))   
        self.settingcb.setItemText(9, _translate("SettingDialog", "D9"))
        self.settingcb.setItemText(10, _translate("SettingDialog", "DE"))   
        self.settingcb.setItemText(11, _translate("SettingDialog", "DF"))
        self.settingbtn.setText(_translate("SettingDialog", "设定发送"))
        
    def setCom(self, port) :
        self.port = port
    
    def construct_command(self, command, value) : 
        size = 7
        if(value) :
            size = size + 4      
        else :
            size = size + 1 
        ret = bytearray(size)
        ret[0] = 0x5A
        ret[1] = 0xA5
        ret[2] = size
        ret[3] = 0x07
        ret[4] = (int(command, 16))&0xFF
        #ret[4] = int(register, 16)
        offset = 5
        if(value) :     
            _value_digital = float(value)
            bytes_val = pack('f', _value_digital)
            ret[offset] = bytes_val[0]
            offset = offset + 1
            ret[offset] = bytes_val[1]
            offset = offset + 1
            ret[offset] = bytes_val[2]
            offset = offset + 1
            ret[offset] = bytes_val[3]
            offset = offset + 1
        else :
            ret[offset] = 0x01
            offset = offset +1
        ret[offset] = 0xAA
        offset = offset + 1
        ret[offset] = 0x55
        return ret
        
    def SendCommand(self, command, value) :
        if self.port :
            ser = serial.Serial(port=self.port, baudrate=9600, bytesize=8,parity=serial.PARITY_NONE, stopbits=serial.STOPBITS_ONE, timeout=1)
            ser.write(self.construct_command(command, value))
            ser.close()

    def GetCommandFeedback(self) :
        if self.port :
            ser = serial.Serial(port=self.port, baudrate=9600, bytesize=8,parity=serial.PARITY_NONE, stopbits=serial.STOPBITS_ONE, timeout=None)
            recv_input = ser.read(100)
            ser.close()
            recv_value = bytearray(4)
            for i in range(4) :
                recv_value[i] = recv_input[5+i]
            return str(unpack("<f",recv_value)[0])
        return None
    
            
    def feedback(self) :
        #self.SendCommand(self.feedbackcb.currentText(), None)
        #feedback = self.GetCommandFeedback()     
        
        if self.port :
            ser = serial.Serial(port=self.port, baudrate=9600, bytesize=8,parity=serial.PARITY_NONE, stopbits=serial.STOPBITS_ONE, timeout=0.1)
            flag = ser. is_open
            if not flag:
                print('Open Error\n')
                ser.close()
                return
            ser.write(self.construct_command(self.feedbackcb.currentText(), None))
            self.feedbackle.setText("")
            sleep(0.1)
            recv_input = ser.read(100)
            recv_value = bytearray(4)
            for i in range(4) :
                recv_value[i] = recv_input[5+i]
            feebackval = unpack("<f",recv_value)[0]
            feedback = str(round(feebackval, 2))
            self.feedbackle.setText(feedback)
            ser.close()
        
        return None
    
    def calibrate(self) :
        self.SendCommand(self.calibratecb.currentText(), self.calibratele.text())
        return None
    
    def setting(self) :
        if self.port :
                ser = serial.Serial(port=self.port, baudrate=9600, bytesize=8,parity=serial.PARITY_NONE, stopbits=serial.STOPBITS_ONE, timeout=0.1)
                ser.write(self.construct_command(self.settingcb.currentText(), self.settingle.text()))          
                sleep(0.1)
                count = 1
                recv_input = ser.read(100)
                while((not recv_input or recv_input[5] != 0) and count <5) :
                    ser.write(self.construct_command(self.settingcb.currentText(), self.settingle.text())) 
                    count = count +1

                ser.close()
